Создай полноценную интеграцию блога с Directus API по аналогии с уже реализованной интеграцией кейсов.
Условия:

API-роут на сервере (Next.js / API Routes)

Создай файл pages/api/directus-blog.ts.

Этот эндпоинт должен выполнять запрос на ${API_BASE}/items/blog?fields=* к Directus API.

Передавать заголовки { 'Accept': 'application/json' }.

Обрабатывать ошибки:

Если ответ не ok, вернуть { status, message }.

Если пришёл HTML вместо JSON, вернуть ошибку Expected JSON but got ....

Если JSON повреждён — ловить и отдавать ошибку парсинга.

Возвращать клиенту чистый JSON в том же формате, что и отдаёт Directus.

Клиентская функция (в lib/blog.ts)

Создай или обнови функцию fetchBlogPosts() так, чтобы она делала запрос на /api/directus-blog (через fetch).

Маппинг полей:

ts
Copy
Edit
{
  id: item.id,
  title: item.title || 'Untitled',
  slug: item.slug || `blog-${item.id}`,
  excerpt: item.excerpt || item.preview_text || '',
  content: item.content || item.full_content || '',
  coverImage: getImageUrl(item.cover_image),
  category: Array.isArray(item.category) ? item.category : (typeof item.category === 'string' ? [item.category] : []),
  tags: Array.isArray(item.tags) ? item.tags : (typeof item.tags === 'string' ? item.tags.split(',').map(t => t.trim()) : []),
  readTime: item.read_time || '',
  authorName: item.author_name || '',
  authorRole: item.author_role || '',
  authorSlug: item.author_slug || '',
  authorAvatar: getImageUrl(item.author_avatar),
  publishedDate: item.published_date || new Date().toISOString(),
  featured: Boolean(item.featured)
}
Логирование

На сервере логировать URL запроса, статус ответа и заголовки.

На клиенте логировать данные ответа после парсинга JSON.

CORS и безопасность

Запрос к Directus должен идти только с сервера (через /api/directus-blog), а не напрямую из браузера.

Проверка

После реализации протестировать, что на /api/directus-blog возвращается корректный JSON.

Убедиться, что фронтенд отображает блоговые статьи с данными из Directus.

Сделай сначала полностью работу по блогу, как это было реализовано для кейсов, с рабочим эндпоинтом и клиентской функцией.

